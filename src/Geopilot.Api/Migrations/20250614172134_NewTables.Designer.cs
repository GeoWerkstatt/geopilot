// <auto-generated />
using System;
using Geopilot.Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Geopilot.Api.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250614172134_NewTables")]
    partial class NewTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Geopilot.Api.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasColumnType("varchar(24)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FileHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("OriginalFilename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SanitizedFilename")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("Geopilot.Api.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DeclaringUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<int>("MandateId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Partial")
                        .HasColumnType("boolean");

                    b.Property<int?>("PrecursorDeliveryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeclaringUserId");

                    b.HasIndex("MandateId");

                    b.HasIndex("PrecursorDeliveryId");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("Geopilot.Api.Models.Mandate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EvaluateComment")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<string>("EvaluatePartial")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<string>("EvaluatePrecursorDelivery")
                        .IsRequired()
                        .HasColumnType("varchar(12)");

                    b.Property<string[]>("FileTypes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Geometry>("SpatialExtent")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.HasKey("Id");

                    b.ToTable("Mandates");
                });

            modelBuilder.Entity("Geopilot.Api.Models.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Geopilot.Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Geopilot.Api.Models.ValidationJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FailureReason")
                        .HasColumnType("text");

                    b.Property<int?>("MandateId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("MandateId");

                    b.HasIndex("Status");

                    b.ToTable("ValidationJobs");
                });

            modelBuilder.Entity("Geopilot.Api.Models.ValidationJobFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("FileStatus")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("StorageType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ValidationJobId")
                        .HasColumnType("uuid");

                    b.Property<string>("ValidationResult")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ValidationJobId", "FileStatus");

                    b.ToTable("ValidationJobFiles");
                });

            modelBuilder.Entity("Geopilot.Api.Models.ValidationJobLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StorageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ValidationJobFileId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ValidationJobFileId", "LogName");

                    b.ToTable("ValidationJobLogs");
                });

            modelBuilder.Entity("MandateOrganisation", b =>
                {
                    b.Property<int>("MandatesId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganisationsId")
                        .HasColumnType("integer");

                    b.HasKey("MandatesId", "OrganisationsId");

                    b.HasIndex("OrganisationsId");

                    b.ToTable("MandateOrganisation");
                });

            modelBuilder.Entity("OrganisationUser", b =>
                {
                    b.Property<int>("OrganisationsId")
                        .HasColumnType("integer");

                    b.Property<int>("UsersId")
                        .HasColumnType("integer");

                    b.HasKey("OrganisationsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("OrganisationUser");
                });

            modelBuilder.Entity("Geopilot.Api.Models.Asset", b =>
                {
                    b.HasOne("Geopilot.Api.Models.Delivery", "Delivery")
                        .WithMany("Assets")
                        .HasForeignKey("DeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("Geopilot.Api.Models.Delivery", b =>
                {
                    b.HasOne("Geopilot.Api.Models.User", "DeclaringUser")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeclaringUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geopilot.Api.Models.Mandate", "Mandate")
                        .WithMany("Deliveries")
                        .HasForeignKey("MandateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geopilot.Api.Models.Delivery", "PrecursorDelivery")
                        .WithMany()
                        .HasForeignKey("PrecursorDeliveryId");

                    b.Navigation("DeclaringUser");

                    b.Navigation("Mandate");

                    b.Navigation("PrecursorDelivery");
                });

            modelBuilder.Entity("Geopilot.Api.Models.ValidationJob", b =>
                {
                    b.HasOne("Geopilot.Api.Models.Mandate", "Mandate")
                        .WithMany()
                        .HasForeignKey("MandateId");

                    b.Navigation("Mandate");
                });

            modelBuilder.Entity("Geopilot.Api.Models.ValidationJobFile", b =>
                {
                    b.HasOne("Geopilot.Api.Models.ValidationJob", "ValidationJob")
                        .WithMany("Files")
                        .HasForeignKey("ValidationJobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValidationJob");
                });

            modelBuilder.Entity("Geopilot.Api.Models.ValidationJobLog", b =>
                {
                    b.HasOne("Geopilot.Api.Models.ValidationJobFile", "ValidationJobFile")
                        .WithMany("Logs")
                        .HasForeignKey("ValidationJobFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ValidationJobFile");
                });

            modelBuilder.Entity("MandateOrganisation", b =>
                {
                    b.HasOne("Geopilot.Api.Models.Mandate", null)
                        .WithMany()
                        .HasForeignKey("MandatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geopilot.Api.Models.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganisationUser", b =>
                {
                    b.HasOne("Geopilot.Api.Models.Organisation", null)
                        .WithMany()
                        .HasForeignKey("OrganisationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Geopilot.Api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Geopilot.Api.Models.Delivery", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Geopilot.Api.Models.Mandate", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Geopilot.Api.Models.User", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Geopilot.Api.Models.ValidationJob", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Geopilot.Api.Models.ValidationJobFile", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
